import{d as s,t as n,f as t,r as a,l as e,g as o,j as p,a as i,F as l}from"./main.js";import{k as c,l as r,m as u,n as d,E as h,o as k,q as g}from"./TableTool-8f68368a.js";class w extends c{}class m extends w{}class f{constructor(s,n,t){this.type=s,this.index=n,this.size=t}get col(){return this.index}get row(){return this.size}toString(){return`TableEvent {type: ${r[this.type]}, index: ${this.index}, size: ${this.size}}`}}class v extends u{constructor(s,n){super(n),this.data=s}get rowCount(){return this.data?this.data.length:0}createRow(){return new this.nodeClass}insertRow(s,n){if(s>this.rowCount)throw Error(`ArrayTableModel.insert(${s}) is out of range, model size is ${this.colCount}, ${this.rowCount}`);let t;return void 0===n&&(n=this.createRow()),t=n instanceof Array?n:[n],this.data.splice(s,0,...t),this.modified.trigger(new f(r.INSERT_ROW,s,t.length)),s}removeRow(s,n=1){if(s>=this.rowCount||s+n>this.rowCount)throw Error(`ArrayTableModel.remove(${s}, ${n}) is out of range, model size is ${this.colCount}, ${this.rowCount}`);return this.data.splice(s,n),this.modified.trigger(new f(r.REMOVE_ROW,s,n)),s}}class C{constructor(s,n,t=!0){this.node=s,this.depth=n,this.open=t}}class x extends u{constructor(s,n){super(s),this.rows=new Array,void 0!==n&&this.createRowInfoHelper(this.rows,n,0)}get colCount(){return 1}get rowCount(){return this.rows.length}getRow(s){for(let n=0;n<this.rows.length;++n)if(this.rows[n].node===s)return n}addSiblingBefore(s){const n=this.createNode();return 0===this.rows.length?(s=0,this.setRoot(n),this.rows.push(new C(n,0))):0===s?(this.setNext(n,this.getRoot()),this.setRoot(n),this.rows.unshift(new C(n,0))):(this.setNext(n,this.rows[s].node),this.getNext(this.rows[s-1].node)===this.rows[s].node?this.setNext(this.rows[s-1].node,n):this.setDown(this.rows[s-1].node,n),this.rows.splice(s,0,new C(n,this.rows[s].depth))),this.modified.trigger(new f(r.INSERT_ROW,s,1)),s}addSiblingAfter(s){const n=this.createNode();if(0===this.rows.length)s=0,this.setRoot(n),this.rows.push(new C(n,0));else{this.setNext(n,this.getNext(this.rows[s].node)),this.setNext(this.rows[s].node,n);const t=this.nodeCount(this.getDown(this.rows[s].node)),a=this.rows[s].depth;s+=t+1,this.rows.splice(s,0,new C(n,a))}return this.modified.trigger(new f(r.INSERT_ROW,s,1)),s}addChildAfter(s){const n=this.createNode();if(0===this.rows.length)this.setRoot(n),this.rows.push(new C(n,0)),this.modified.trigger(new f(r.INSERT_ROW,0,1));else{const t=this.getDown(this.rows[s].node),a=this.nodeCount(t);for(let n=0;n<a;++n)++this.rows[s+1+n].depth;this.setDown(n,t),this.setDown(this.rows[s].node,n),this.rows.splice(s+1,0,new C(n,this.rows[s].depth+1)),this.modified.trigger(new f(r.INSERT_ROW,s+1,1))}return s}addParentBefore(s){const n=this.createNode();if(0===s){for(let n=0;n<this.rows.length;++n)++this.rows[s+n].depth;this.setDown(n,this.getRoot()),this.setRoot(n),this.rows.unshift(new C(n,0))}else{const t=this.rows[s].depth,a=this.nodeCount(this.getDown(this.rows[s].node))+1;for(let n=0;n<a;++n)++this.rows[s+n].depth;this.setDown(n,this.rows[s].node),this.setNext(n,this.getNext(this.rows[s].node)),this.setNext(this.rows[s].node,void 0),this.getNext(this.rows[s-1].node)===this.rows[s].node?this.setNext(this.rows[s-1].node,n):this.setDown(this.rows[s-1].node,n),this.rows.splice(s,0,new C(n,t))}return this.modified.trigger(new f(r.INSERT_ROW,s,1)),s}deleteAt(s){let n=this.getDown(this.rows[s].node);if(void 0!==n){const t=this.nodeCount(n)+1;for(let n=0;n<t;++n)--this.rows[s+n].depth;this.append(n,this.getNext(this.rows[s].node)),this.setNext(this.rows[s].node,void 0),0===s?this.setRoot(n):this.setNext(this.rows[s-1].node,n)}else if(0===s){const n=this.getNext(this.rows[s].node);this.setNext(this.rows[s].node,void 0),this.setRoot(n)}else{const n=this.getNext(this.rows[s].node);this.setNext(this.rows[s].node,void 0),this.getNext(this.rows[s-1].node)===this.rows[s].node?this.setNext(this.rows[s-1].node,n):this.setDown(this.rows[s-1].node,n)}return this.rows.splice(s,1),this.modified.trigger(new f(r.REMOVE_ROW,s,1)),s}init(){}toggleAt(s){this.rows[s].open?this.closeAt(s):this.openAt(s)}isOpen(s){return this.rows[s].open}openAt(s){let n=this.rows[s];if(n.open||void 0===this.getDown(n.node))return;n.open=!0;const t=this.createRowInfo(s);this.rows.splice(s+1,0,...t),this.modified.trigger(new f(r.INSERT_ROW,s+1,t.length))}closeAt(s){let n=this.rows[s];if(!n.open||void 0===this.getDown(n.node))return;const t=this.getVisibleChildCount(s);n.open=!1,this.rows.splice(s+1,t),this.modified.trigger(new f(r.REMOVE_ROW,s+1,t))}collapse(){let s=0;for(;s<this.rowCount;)this.closeAt(s),++s;for(let s of this.rows)s.open=!1}createRowInfo(s){const n=new Array;let t=this.rows[s];return t.open&&this.getDown(t.node)&&this.createRowInfoHelper(n,this.getDown(t.node),t.depth+1),n}createRowInfoHelper(s,n,t){const a=new C(n,t,!1);s.push(a),a.open&&this.getDown(n)&&this.createRowInfoHelper(s,this.getDown(n),a.depth+1),this.getNext(n)&&this.createRowInfoHelper(s,this.getNext(n),a.depth)}getVisibleChildCount(s){let n=this.rows[s],t=1;if(n.open&&this.getDown(n.node)){const n=this.getVisibleChildCountHelper(s+1);s+=n,t+=n}return t-1}getVisibleChildCountHelper(s){let n=this.rows[s],t=1;if(n.open&&this.getDown(n.node)){const n=this.getVisibleChildCountHelper(s+1);s+=n,t+=n}if(this.getNext(n.node)){const n=this.getVisibleChildCountHelper(s+1);s+=n,t+=n}return t}append(s,n){if(void 0===n)return;let t,a=s;for(;t=this.getNext(a),void 0!==t;)a=t;this.setNext(a,n)}nodeCount(s){return void 0===s?0:1+this.nodeCount(this.getDown(s))+this.nodeCount(this.getNext(s))}}class y extends m{constructor(s){super(s),this.config.seamless=!0}treeCell(t,a,e){this._showCell(t,a);const o=s(n(e));o.style.verticalAlign="middle",o.style.padding="2px",a.appendChild(o)}showCell(s,n){this._showCell(s,n)}_showCell(s,n){if(void 0===this.model)return void console.log("no model");const o=this.model.rows[s.row],p=12,i=3.5,l=Math.round(2)-.5,c=o.depth*p+p+i,r=t();r.setAttributeNS(null,"width",`${c}`),r.setAttributeNS(null,"height","12"),r.style.verticalAlign="middle",r.style.background="none";const u=o.depth;if(void 0!==this.model.getDown(o.node)){const s=u*p+i,n=a(s,l,8,8,"#000","#fff");n.style.cursor="pointer",r.appendChild(n);const t=e(s+2,l+4,s+8-2,l+4,"#000");t.style.cursor="pointer",r.appendChild(t);const c=e(s+4,l+2,s+4,l+8-2,"#000");c.style.cursor="pointer",c.style.display=o.open?"none":"",r.appendChild(c),r.appendChild(e(s+8,l+4,s+8+3,l+4,"#f80")),r.onpointerdown=n=>{n.preventDefault(),n.stopPropagation();const t=this.model.getRow(o.node);if(void 0===t)return void console.log("  ==> couldn't find row number for node");const a=r.getBoundingClientRect(),e=n.clientX-a.left,p=n.clientY-a.top;s<=e&&e<=s+8&&l<=p&&p<=l+8&&(this.model?.toggleAt(t),c.style.display=this.model.isOpen(t)?"none":"")}}else r.appendChild(e(u*p+i+4-.5,0,u*p+i+4,l+4,"#f80")),r.appendChild(e(u*p+i+4,l+4,u*p+i+8+3,l+4,"#f80"));let d="";for(let n=0;n<=u;++n){const t=n*p+i+4+2;for(let a=s.row+1;a<this.model.rowCount&&!(this.model.rows[a].depth<n);++a)if(n===this.model.rows[a].depth){(n!==u||void 0!==this.model.getNext(o.node))&&(d+=`<line x1='${t}' y1='0' x2='${t}' y2='100%' stroke='%23f80' />`);break}}if(void 0===this.model.getDown(o.node)||void 0===this.model.getNext(o.node)){const s=u*p+i+4+2;d+=`<line x1='${s}' y1='0' x2='${s}' y2='4' stroke='%23f80' />`}n.style.background=`url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' style='background: %23000;'>${d}</svg>")`,n.style.backgroundRepeat="repeat-y",n.replaceChildren(r)}}class b extends x{constructor(s,n){super(s,n),this.root=n}createNode(){return new this.nodeClass}deleteNode(s){}getRoot(){return this.root}setRoot(s){this.root=s}getDown(s){return s.down}setDown(s,n){s.down=n}getNext(s){return s.next}setNext(s,n){s.next=n}}class _ extends v{constructor(s,n){super(s,n)}get colCount(){throw Error("ArrayModel.colCount() should not be called. Override TableAdapter.colCount() instead.")}}class N extends m{getColumnHead(s){const n=this.getColumnHeads();if(void 0!==n)return document.createTextNode(n[s])}getRowHead(s){}get colCount(){return this.getRow(this.model?.data[0]).length}showCell(s,n){const t=this.getField(s.col,s.row);void 0!==t&&n.replaceChildren(document.createTextNode(t))}editCell(s,n){}getField(s,n){if(!this.model)return;const t=this.model.data[n];return this.getRow(t)[s].toString()}setField(s,n,t){this.model&&(this.getRow(this.model.data[n])[s].fromString(t),this.model.modified.trigger(new f(r.CELL_CHANGED,s,n)))}}const A=["AL","LE","XE","GE","ZA","CE","BI","SO","US","ES","AR","MA","IN","DI","RE","A","ER","AT","EN","BE","RA","LA","VE","TI","ED","OR","QU","AN","TE","IS","RI","ON"],R=["Anarchy","Feudal","Multi-government","Dictatorship","Communist","Confederacy","Democracy","Corporate State"],E=["Rich","Average","Poor","Mainly"],T=[" Industrial"," Agricultural"],S=["Large ","Fierce ","Small "],M=["Green ","Red ","Yellow ","Blue ","Black ","Harmless "],D=["Slimy ","Bug-Eyed ","Horned ","Bony ","Fat ","Furry "],$=["Rodents ","Frogs","Lizards","Lobsters","Birds","Humanoids","Felines","Insects"];class V extends d{constructor(){super()}get colCount(){return 4}get rowCount(){return 64}get(s,n){return V.get(s,n)}static get(s,n){let t=this.hash(`${n}`);switch(s){case 0:{let s="",a=t%6+1;for(let e=0;e<a;++e)t=this.hash(`${n}`,t),s+=A[t%A.length];return s.charAt(0)+s.toLowerCase().substring(1)}case 1:return R[t%R.length];case 2:{t>>>=3;const s=t%E.length;t>>>=2;return E[s]+T[t%T.length]}case 3:{t>>>=6;let s=t%S.length;t>>>=2;const n=t%M.length;t>>>=3;const a=t%D.length;t>>>=3;return S[s]+M[n]+D[a]+$[(t%4+a)%$.length]}}throw Error(`unreachable col ${s}, row ${n}`)}static hash(s,n=0){let t=3735928559^n,a=1103547991^n;for(let n,e=0;e<s.length;e++)n=s.charCodeAt(e),t=Math.imul(t^n,2654435761),a=Math.imul(a^n,1597334677);return t=Math.imul(t^t>>>16,2246822507)^Math.imul(a^a>>>13,3266489909),a=Math.imul(a^a>>>16,2246822507)^Math.imul(t^t>>>13,3266489909),4294967296*(2097151&a)+(t>>>0)}}class O{constructor(){this.name="New Name",this.government="New Government",this.economy="New Economy",this.species="New Species"}}c.register(class extends c{constructor(s){super(s)}getColumnHead(s){switch(s){case 0:return n("Name");case 1:return n("Government");case 2:return n("Economy");case 3:return n("Species")}}getRowHead(s){return n(`${s+1}`)}showCell(s,t){t.replaceChildren(n(this.model.get(s.col,s.row)))}},V),new V;const H=Array(64);for(let s=0;s<64;++s)H[s]={name:V.get(0,s),government:V.get(1,s),economy:V.get(2,s),species:V.get(3,s)};c.register(class extends N{getColumnHeads(){return["Name","Government","Economy","Species"]}getRow(s){return o(s,"name","government","economy","species")}},_,O);const I=new _(H,O),L=document.createElement("pre");L.className="language-tsx",L.innerHTML='\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> dynamicSystem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./starsystem"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SpreadsheetModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@toad/table/model/SpreadsheetModel"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Table<span class="token punctuation">,</span> TableAdapter<span class="token punctuation">,</span> TablePos<span class="token punctuation">,</span> TableTool<span class="token punctuation">,</span> TreeAdapter<span class="token punctuation">,</span> TreeNode<span class="token punctuation">,</span> TreeNodeModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@toad"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SpreadsheetAdapter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@toad/table/adapter/SpreadsheetAdapter"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SpreadsheetCell <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@toad/table/model/SpreadsheetCell"</span>\n\n<span class="token comment">//</span>\n<span class="token comment">// Application Layer</span>\n<span class="token comment">//</span>\n\n<span class="token comment">// Spreadsheet</span>\n\n<span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Pieces"</span><span class="token punctuation">,</span> <span class="token string">"Price/Piece"</span><span class="token punctuation">,</span> <span class="token string">"Price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"=4"</span><span class="token punctuation">,</span> <span class="token string">"=0.98"</span><span class="token punctuation">,</span> <span class="token string">"=B2*C2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"=2"</span><span class="token punctuation">,</span> <span class="token string">"=1.98"</span><span class="token punctuation">,</span> <span class="token string">"=B3*C3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">"Citrus"</span><span class="token punctuation">,</span> <span class="token string">"=1"</span><span class="token punctuation">,</span> <span class="token string">"=1.48"</span><span class="token punctuation">,</span> <span class="token string">"=B4*C4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">"SUM"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"=D2+D3+D4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> spreadsheet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpreadsheetModel</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> spreadsheet<span class="token punctuation">.</span>rowCount<span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> spreadsheet<span class="token punctuation">.</span>colCount<span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> sheet<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> sheet<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            spreadsheet<span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> row<span class="token punctuation">,</span> sheet<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nTableAdapter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SpreadsheetAdapter<span class="token punctuation">,</span> SpreadsheetModel<span class="token punctuation">,</span> SpreadsheetCell<span class="token punctuation">)</span>\n\n<span class="token comment">// Tree</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyNode</span> <span class="token keyword">implements</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>\n    label<span class="token operator">:</span> string\n    next<span class="token operator">?</span><span class="token operator">:</span> MyNode\n    down<span class="token operator">?</span><span class="token operator">:</span> MyNode\n    <span class="token keyword">static</span> counter <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>MyNode<span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// class MyTreeAdapter extends TreeAdapter&lt;MyNode> {</span>\n<span class="token comment">//     override showCell(pos: TablePos, cell: HTMLSpanElement) {</span>\n<span class="token comment">//         // return this.model &amp;&amp; this.treeCell(row, this.model.rows[row].node.label)</span>\n<span class="token comment">//     }</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyTreeAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">TreeAdapter</span><span class="token operator">&lt;</span>MyNode<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>model<span class="token operator">:</span> TreeNodeModel<span class="token operator">&lt;</span>MyNode<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>seamless <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    override <span class="token function">showCell</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> TablePos<span class="token punctuation">,</span> cell<span class="token operator">:</span> HTMLSpanElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"no model"</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> rowinfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span>rows<span class="token punctuation">[</span>pos<span class="token punctuation">.</span>row<span class="token punctuation">]</span>\n        <span class="token keyword">const</span> label <span class="token operator">=</span> rowinfo<span class="token punctuation">.</span>node<span class="token punctuation">.</span>label\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">treeCell</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> cell<span class="token punctuation">,</span> label<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nTreeAdapter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>MyTreeAdapter<span class="token punctuation">,</span> TreeNodeModel<span class="token punctuation">,</span> MyNode<span class="token punctuation">)</span>\n<span class="token keyword">let</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeModel</span><span class="token punctuation">(</span>MyNode<span class="token punctuation">)</span>\ntree<span class="token punctuation">.</span><span class="token function">addSiblingAfter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\ntree<span class="token punctuation">.</span><span class="token function">addChildAfter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\ntree<span class="token punctuation">.</span><span class="token function">addChildAfter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\ntree<span class="token punctuation">.</span><span class="token function">addSiblingAfter</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\ntree<span class="token punctuation">.</span><span class="token function">addSiblingAfter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\ntree<span class="token punctuation">.</span><span class="token function">addChildAfter</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\ntree<span class="token punctuation">.</span><span class="token function">addSiblingAfter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token comment">//</span>\n<span class="token comment">// View Layer</span>\n<span class="token comment">//</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Table</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">While tables are a work in progress, the following should illustrate the intended versatility:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Editable Array of Records</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TableTool</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token string">"200px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>dynamicSystem<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Spreadsheet</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Field values beginning with \'=\' define formulas. Valid operators are +, -, *, / and (, ).</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TableTool</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token string">"200px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>spreadsheet<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">Tree</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TableTool</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token string">"320px"</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token string">"200px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>tree<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n';class F extends u{constructor(s,n=0,t=0,a){super(s),this._cols=n,this._rows=t;const e=n*t;if(a)this._data=a;else{this._data=void 0===a?new Array(e):a;for(let s=0;s<e;++s)this._data[s]=new this.nodeClass}}asArray(){return this._data}get colCount(){return this._cols}get rowCount(){return this._rows}getCell(s,n){const t=s+n*this._cols;if(t>=this._data.length)throw Error(`GridTableModel.getCell(${s}, ${n}) is out of range in grid of size ${this.colCount} x ${this.rowCount}`);return this._data[t]}setCell(s,n,t){this._data[s+n*this._cols]=t}insertRow(s,n,t=this._cols){if(0===this._data.length&&(this._cols=t),void 0===n){n=new Array(this._cols);for(let s=0;s<this._cols;++s)n[s]=new this.nodeClass}const a=n.length/this._cols;return this._data.splice(s*this._cols,0,...n),this._rows+=a,this.modified.trigger(new f(r.INSERT_ROW,s,a)),s}removeRow(s,n=1){return this._data.splice(s*this._cols,this._cols*n),this._rows-=n,this.modified.trigger(new f(r.REMOVE_ROW,s,n)),s}insertColumn(s,n,t=this._rows){if(0===this._data.length&&(this._rows=t),void 0===n){n=new Array(this._rows);for(let s=0;s<this._rows;++s)n[s]=new this.nodeClass}const a=n.length/this._rows;let e=s+this._cols*(this._rows-1),o=n.length;for(let s=0;s<this._rows;++s){for(let s=0;s<a;++s)this._data.splice(e,0,n[--o]);e-=this._cols}return this._cols+=a,this.modified.trigger(new f(r.INSERT_COL,s,a)),s}removeColumn(s,n=1){let t=s+this._cols*(this._rows-1);for(let s=0;s<this._rows;++s)this._data.splice(t,n),t-=this._cols;return this._cols-=n,this.modified.trigger(new f(r.REMOVE_COL,s,n)),s}}class B{constructor(s){this.value=s}eval(s){if("number"==typeof this.value)return this.value;if(this.value instanceof Array){if(void 0===s)throw Error(`yikes: no model to get cell [${this.value[0]},${this.value[1]}]`);return s.getCell(this.value[0],this.value[1])._calculatedValue}switch(this.value){case"+":return this.down.eval(s)+this.down.next.eval(s);case"-":return this.down?.next?this.down.eval(s)-this.down.next.eval(s):-this.down.eval(s);case"*":return this.down.eval(s)*this.down.next.eval(s);case"/":return this.down.eval(s)/this.down.next.eval(s);default:throw Error(`unexpected token '${this.value}'`)}}append(s){if(void 0===this.down)this.down=s;else{let n=this.down;for(;n.next;)n=n.next;n.next=s}}dependencies(s=[]){return this.value instanceof Array&&s.push(this.value),this.next&&this.next.dependencies(s),this.down&&this.down.dependencies(s),s}toString(){return this._toString()}_toString(s="\n",n=0){for(let t=0;t<n;++t)s+="    ";s+=this.value,s+="\n";for(let t=this.down;t;t=t.next)s=t._toString(s,n+1);return s}}class P{constructor(s){this.i=0,this.stack=[],this.str=s}isspace(s){return" "==s||"\n"==s||"\r"==s||"\t"==s||"\t"==s}isnumber(s){const n=s.charCodeAt(0);return n>=48&&n<=57}isalpha(s){const n=s.charCodeAt(0);return n>=65&&n<=90||n>=145&&n<=122}isalnum(s){return this.isnumber(s)||this.isalpha(s)}unlex(s){this.stack.push(s)}lex(){if(this.stack.length>0)return this.stack.pop();let s=0,n=0,t=0;if(this.i>=this.str.length)return;const a=this.i;for(;;){let e=this.str.at(this.i);switch(t){case 0:if(void 0===e)return;if(this.isspace(e)){++this.i;break}if(this.isnumber(e)){++this.i,t=1;break}if(this.isalpha(e)){s=0,t=3;break}switch(e){case"+":case"-":case"*":case"/":case"(":case")":case"=":return++this.i,new B(e)}return;case 1:if(void 0!==e&&this.isnumber(e)){++this.i;break}if("."===e||"e"==e||"E"==e){++this.i,t=2;break}return new B(parseFloat(this.str.substring(a,this.i)));case 2:if(void 0!==e&&this.isnumber(e)){++this.i;break}return new B(parseFloat(this.str.substring(a,this.i)));case 3:if(void 0!==e){const a=e.charCodeAt(0);if(a>=48&&a<=57){n=a-48,t=4,++this.i;break}if(a>=65&&a<=90){s*=26,s+=a-64,++this.i;break}if(a>=145&&a<=122){s*=26,s+=a-144,++this.i;break}}return new B(this.str.substring(a,this.i));case 4:if(void 0!==e){const s=e.charCodeAt(0);if(s>=48&&s<=57){n*=10,n+=s-48,++this.i;break}}return new B([s-1,n-1])}}}}function W(s){const n=j(s);if(void 0===n)return;const t=s.lex();if(void 0===t)return n;if("+"===t.value||"-"===t.value){const a=W(s);return void 0===a?(s.unlex(t),n):(t.append(n),t.append(a),t)}return s.unlex(t),n}function j(s){const n=z(s);if(void 0===n)return;const t=s.lex();if(void 0===t)return n;if("*"===t.value||"/"===t.value){const a=j(s);if(void 0===a)throw Error(`expexted expression after ${t.value}`);return t.append(n),t.append(a),t}return s.unlex(t),n}function z(s){const n=s.lex();if(void 0!==n){if("number"==typeof n.value)return n;if(n.value instanceof Array)return n;if("("===n.value){const n=W(s);if(void 0===n)throw Error("Unexpected end after '(");const t=s.lex();if(")"!==t?.value)throw Error("Excepted ')");return n}if("-"===n.value){const t=z(s);if(void 0!==t)return n.append(t),n}s.unlex(n)}}class G{constructor(s){void 0!==s&&0!==s.trim().length&&(this.value=s)}eval(s){void 0!==this._node&&(this._calculatedValue=this._node.eval(s))}set value(s){this._node=function(s){const n=s.lex();if(void 0!==n&&"="===n.value)return W(s)}(new P(s)),this._inputValue=s}get value(){return this._error&&void 0!==this._inputValue?this._inputValue:this._node?`${this._calculatedValue}`:void 0!==this._inputValue?this._inputValue:""}getDependencies(){return void 0!==this._node?this._node.dependencies():[]}}class U extends F{constructor(s,n){super(G,s,n),this.dependencies=new Map}getField(s,n){const t=this.getCell(s,n);return void 0===t?"":`${t.value}`}setField(s,n,t){const a=s+n*this._cols;let e=this._data[a];void 0===e?(e=new G(t),this._data[s+n*this._cols]=e):(this.unobserve(e),e.value=t),this.observe(e),this.eval(e,new Set)}sendCellChanged(s){let n=0;for(let t=0;t<this._rows;++t)for(let a=0;a<this._cols;++a)if(s===this._data[n++])return void this.modified.trigger(new f(r.CELL_CHANGED,a,t))}eval(s,n){if(n.has(s))return void n.forEach((s=>{s._error="Cycle: This formula can't reference its own cell, or depend on another formula that references this cell.",this.sendCellChanged(s)}));s._error&&(s._error=void 0,this.sendCellChanged(s)),n.add(s);const t=s._calculatedValue;s.eval(this),t!=s._calculatedValue&&this.sendCellChanged(s);const a=this.dependencies.get(s);void 0!==a&&a.forEach((s=>{this.eval(s,n)}))}observe(s){s.getDependencies().forEach((n=>{const t=n[0]+n[1]*this._cols;let a=this._data[t];void 0===a&&(a=new G,this._data[t]=a);let e=this.dependencies.get(a);void 0===e&&(e=new Set,this.dependencies.set(a,e)),e.add(s)}))}unobserve(s){s.getDependencies().forEach((n=>{const t=n[0]+n[1]*this._cols;let a=this._data[t];if(void 0!==a){let n=this.dependencies.get(a);void 0!==n&&n.delete(s)}}))}}class q extends m{showCell(s,t){if(!this.model)return;const a=this.model.getCell(s.col,s.row);void 0!==a?t.replaceChildren(n(a.value)):t.replaceChildren()}getRowHead(s){return n(`${s+1}`)}getColumnHead(s){let t="",a=s;for(;t=`${String.fromCharCode(a%26+65)}${t}`,a=Math.floor(a/26),0!==a;)a-=1;return n(t)}}const X=[["Name","Pieces","Price/Piece","Price"],["Apple","=4","=0.98","=B2*C2"],["Banana","=2","=1.98","=B3*C3"],["Citrus","=1","=1.48","=B4*C4"],["SUM","","","=D2+D3+D4"]],Y=new U(25,25);for(let s=0;s<Y.rowCount;++s)for(let n=0;n<Y.colCount;++n)s<X.length&&n<X[s].length&&Y.setField(n,s,X[s][n]);c.register(class extends q{constructor(s){super(s),this.config.editMode=h.EDIT_ON_ENTER}showCell(s,n){if(!this.model)return;const t=this.model.getCell(s.col,s.row);t._error?(n.classList.add("error"),n.title=t._error):(n.classList.remove("error"),n.title=""),super.showCell(s,n)}editCell(s,n){const t=this.model.getCell(s.col,s.row);void 0!==t&&void 0!==t._inputValue&&(n.innerText=t._inputValue)}saveCell(s,n){try{this.model.setField(s.col,s.row,n.innerText);const t=this.model.getCell(s.col,s.row);n.innerText=t.value}catch(s){console.log("saveCell caught error")}}},U,G);class Q{constructor(){this.label="#"+Q.counter++}}Q.counter=0;y.register(class extends y{constructor(s){super(s),this.config.seamless=!0}showCell(s,n){if(void 0===this.model)return void console.log("no model");const t=this.model.rows[s.row].node.label;super.treeCell(s,n,t)}},b,Q);let Z=new b(Q);Z.addSiblingAfter(0),Z.addChildAfter(0),Z.addChildAfter(1),Z.addSiblingAfter(2),Z.addSiblingAfter(1),Z.addChildAfter(4),Z.addSiblingAfter(0);var J=()=>p(l,{children:[i("h1",{children:"Table"}),i("div",{class:"section",children:i("p",{children:"While tables are a work in progress, the following should illustrate the intended versatility:"})}),i("h2",{children:"Editable Array of Records"}),i(g,{}),i(k,{style:{width:"100%",height:"200px"},model:I}),i("h2",{children:"Spreadsheet"}),i("p",{children:"Field values beginning with '=' define formulas. Valid operators are +, -, *, / and (, )."}),i(g,{}),i(k,{style:{width:"100%",height:"200px"},model:Y}),i("h2",{children:"Tree"}),i(g,{}),i(k,{style:{width:"320px",height:"200px"},model:Z}),L]});export{J as default};
